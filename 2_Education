{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":43267,"status":"ok","timestamp":1653396841575,"user":{"displayName":"Анастасия Валерьевна Тюрина","userId":"16933887192351318416"},"user_tz":-180},"id":"pjJ-Lke_gMLC","outputId":"238b642b-5379-41be-b6a2-33672af8a72c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting git+https://github.com/qubvel/segmentation_models.pytorch\n","  Cloning https://github.com/qubvel/segmentation_models.pytorch to /tmp/pip-req-build-mq04f8lb\n","  Running command git clone -q https://github.com/qubvel/segmentation_models.pytorch /tmp/pip-req-build-mq04f8lb\n","  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","    Preparing wheel metadata ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: pillow in /usr/local/lib/python3.7/dist-packages (from segmentation-models-pytorch==0.3.0.dev0) (7.1.2)\n","Collecting timm==0.4.12\n","  Downloading timm-0.4.12-py3-none-any.whl (376 kB)\n","\u001b[K     |████████████████████████████████| 376 kB 28.8 MB/s \n","\u001b[?25hRequirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from segmentation-models-pytorch==0.3.0.dev0) (4.64.0)\n","Requirement already satisfied: torchvision>=0.5.0 in /usr/local/lib/python3.7/dist-packages (from segmentation-models-pytorch==0.3.0.dev0) (0.12.0+cu113)\n","Collecting pretrainedmodels==0.7.4\n","  Downloading pretrainedmodels-0.7.4.tar.gz (58 kB)\n","\u001b[K     |████████████████████████████████| 58 kB 7.7 MB/s \n","\u001b[?25hCollecting efficientnet-pytorch==0.6.3\n","  Downloading efficientnet_pytorch-0.6.3.tar.gz (16 kB)\n","Requirement already satisfied: torch in /usr/local/lib/python3.7/dist-packages (from efficientnet-pytorch==0.6.3->segmentation-models-pytorch==0.3.0.dev0) (1.11.0+cu113)\n","Collecting munch\n","  Downloading munch-2.5.0-py2.py3-none-any.whl (10 kB)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch->efficientnet-pytorch==0.6.3->segmentation-models-pytorch==0.3.0.dev0) (4.2.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from torchvision>=0.5.0->segmentation-models-pytorch==0.3.0.dev0) (1.21.6)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from torchvision>=0.5.0->segmentation-models-pytorch==0.3.0.dev0) (2.23.0)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from munch->pretrainedmodels==0.7.4->segmentation-models-pytorch==0.3.0.dev0) (1.15.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->torchvision>=0.5.0->segmentation-models-pytorch==0.3.0.dev0) (2022.5.18.1)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->torchvision>=0.5.0->segmentation-models-pytorch==0.3.0.dev0) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->torchvision>=0.5.0->segmentation-models-pytorch==0.3.0.dev0) (2.10)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->torchvision>=0.5.0->segmentation-models-pytorch==0.3.0.dev0) (1.24.3)\n","Building wheels for collected packages: segmentation-models-pytorch, efficientnet-pytorch, pretrainedmodels\n","  Building wheel for segmentation-models-pytorch (PEP 517) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for segmentation-models-pytorch: filename=segmentation_models_pytorch-0.3.0.dev0-py3-none-any.whl size=98008 sha256=bd2097d0b7ef105090a568e28b4e26b04e9e16f8c01bf7422f02e2299df68a51\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-vu9ks402/wheels/fa/c5/a8/1e8af6cb04a0974db8a4a156ebd2fdd1d99ad2558d3fce49d4\n","  Building wheel for efficientnet-pytorch (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for efficientnet-pytorch: filename=efficientnet_pytorch-0.6.3-py3-none-any.whl size=12421 sha256=e48690b2ab6f1f93061485c0c01ea3a41ea1a76d3bccd2b2e3be910709bb21ee\n","  Stored in directory: /root/.cache/pip/wheels/90/6b/0c/f0ad36d00310e65390b0d4c9218ae6250ac579c92540c9097a\n","  Building wheel for pretrainedmodels (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pretrainedmodels: filename=pretrainedmodels-0.7.4-py3-none-any.whl size=60965 sha256=eff27cf51052e06e38cfebd19e99b2996202d8699465783bef1cfc8ee6fe151c\n","  Stored in directory: /root/.cache/pip/wheels/ed/27/e8/9543d42de2740d3544db96aefef63bda3f2c1761b3334f4873\n","Successfully built segmentation-models-pytorch efficientnet-pytorch pretrainedmodels\n","Installing collected packages: munch, timm, pretrainedmodels, efficientnet-pytorch, segmentation-models-pytorch\n","Successfully installed efficientnet-pytorch-0.6.3 munch-2.5.0 pretrainedmodels-0.7.4 segmentation-models-pytorch-0.3.0.dev0 timm-0.4.12\n","Mounted at /gdrive\n"]},{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7fdabaedc730>"]},"metadata":{},"execution_count":1}],"source":["import torch\n","import glob\n","from PIL import Image\n","import torch.optim as optim\n","from torch.utils.data import DataLoader,  TensorDataset, Dataset\n","import torch.nn as nn\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import math\n","\n","from os import listdir\n","import shutil\n","import time\n","from tqdm import tqdm\n","\n","#from torchvision import models, datasets, transforms\n","!pip install git+https://github.com/qubvel/segmentation_models.pytorch\n","import segmentation_models_pytorch as smp\n","\n","import imageio\n","\n","import pickle\n","\n","from google.colab import drive\n","drive.mount('/gdrive')\n","\n","import random\n","SEED = 42\n","random.seed(SEED)\n","np.random.seed(SEED)\n","torch.manual_seed(SEED)"]},{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"id":"YG2ToT0YgMLG"},"outputs":[],"source":["# dataset creating \n","class MyDataset(Dataset):\n","    \n","    def __init__(self, data, targets, transform=None):\n","        #self.data = data\n","        #self.targets = targets\n","        #self.data.sort()\n","        #self.targets.sort()\n","        #self.transform = transform\n","\n","        self.dir_data = data\n","        self.dir_targets = targets\n","\n","        self.list_data = listdir(data)\n","        self.list_targets = listdir(targets)\n","\n","        self.list_data.sort()\n","        self.list_targets.sort()\n","\n","\n","        \n","    def __len__(self):\n","        #return len(self.targets)\n","        #return 9593\n","        if len(listdir(self.dir_data)) != len(listdir(self.dir_targets)):\n","            raise Exception(f'error {len(listdir(self.dir_data))} {len(listdir(self.dir_targets))}')\n","        return len(listdir(self.dir_data))\n","\n","    def __getitem__(self, idx):\n","        #image = self.data[idx]\n","        #label = self.targets[idx]\n","        #if self.transform:\n","            #image = self.transform(image)\n","        #print(f'{self.dir_data}/{self.list_data[idx]}')\n","        with open(f'{self.dir_data}/{self.list_data[idx]}', 'rb') as f:\n","            image = pickle.load(f)\n","\n","        with open(f'{self.dir_targets}/{self.list_targets[idx]}', 'rb') as f:\n","            label = pickle.load(f)\n","\n","        if type(image) == torch.Tensor:\n","            return image.float(), label\n","\n","        else:\n","            return torch.from_numpy(image).float(), torch.from_numpy(label)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UO0tkM9RA4OT"},"outputs":[],"source":["# dataset balanced\n","dir_img = '/gdrive/My Drive/Segmentation_project/train_val_images_cropped_balanced'\n","dir_mask = '/gdrive/My Drive/Segmentation_project/train_val_masks_2cl_cropped_balanced'\n","\n","dataset_balanced = MyDataset(data=dir_img, targets=dir_mask)\n","\n","#print(len(dataset_balanced))\n","\n","\n","train_dataset, val_dataset = torch.utils.data.random_split(dataset_balanced, [int(5200*0.8), int(5200*0.2)])\n","train_loader = DataLoader(train_dataset, batch_size = 26, shuffle = True)\n","val_loader = DataLoader(val_dataset, batch_size = 26, shuffle = False)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"elapsed":962,"status":"ok","timestamp":1653256751267,"user":{"displayName":"Анастасия Валерьевна Тюрина","userId":"16933887192351318416"},"user_tz":-180},"id":"hz_dCTziCbVr","outputId":"7268e670-7996-4f14-dc4a-4c7343db7b85"},"outputs":[{"data":{"text/plain":["<matplotlib.image.AxesImage at 0x7fabfce2ce90>"]},"execution_count":4,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 360x360 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["fig, axes = plt.subplots(1, 2, figsize=(5,5))\n","axes[0].imshow(torch.transpose(torch.transpose(dataset_balanced[6][0], 0, 2), 0, 1))\n","axes[1].imshow(dataset_balanced[6][1].squeeze(), cmap = 'gray', vmin=0, vmax=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jEZgMnYOdgs9"},"outputs":[],"source":["# IoU validation metrics\n","def validate_iou(model, val_loader, device):\n","    metrics = []\n","    for images, labels in val_loader:\n","        images = images.to(device)\n","        labels = labels.to(device)\n","        #print(labels.shape, 'labels')\n","        pred_mask = model(images).to(device)\n","        pred_mask = (pred_mask > 0.5).float()\n","        #print(pred_mask.shape, 'pred')\n","        tp, fp, fn, tn = smp.metrics.get_stats(pred_mask.long(), labels.long(), mode=\"binary\")\n","        metrics.append(smp.metrics.iou_score(tp, fp, fn, tn, reduction=\"micro-imagewise\").detach().cpu().numpy())\n","    \n","    #print(metrics)\n","    return np.array(metrics).mean()"]},{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"id":"7eKsmZBFgMLM"},"outputs":[],"source":["# train function\n","def train(model, num_epochs=50):\n","    \n","    #device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","    #print('Using device:', device)\n","    \n","    device = torch.device(\"cuda\")\n","    \n","    sum_acc = np.zeros((1,  num_epochs))\n","    sum_loss = sum_acc.copy()\n","    model.train()\n","    model.to(device)\n","\n","    criterion = smp.losses.DiceLoss(smp.losses.BINARY_MODE, from_logits=True)\n","    \n","    optimizer = optim.Adam(model.parameters(), lr=0.001, weight_decay=1e-4)\n","    best_accuracy = 0\n","    best_loss = 100\n","\n","    for epoch in tqdm(range(num_epochs)):\n","        epoch_start = time.time()\n","\n","        for img_batch, labels_batch in (train_loader):\n","            optimizer.zero_grad()\n","            #print(img_batch.shape)\n","            #print(labels_batch.shape, 'labels')\n","        \n","            output = model(img_batch.to(device))            \n","            #print(output.shape, 'output')\n","\n","            #loss = criterion(output, labels_batch.to(device).unsqueeze(1))\n","            loss = criterion(output, labels_batch.to(device).unsqueeze(1))\n","            #print(loss, 'loss')\n","            loss.backward()\n","            optimizer.step()\n","\n","        accuracy = validate_iou(model, val_loader, device)\n","        #print(accuracy)\n","\n","        if best_accuracy < accuracy:\n","            best_accuracy = accuracy\n","            print('Best metrics')\n","            torch.save(model.state_dict(), '/gdrive/My Drive/Segmentation_project/weights/model_weights_efficientnet-b4_batch=26_deep.pth') #name of saved weights\n","        if best_loss > loss.cpu().item():\n","            best_loss = loss.cpu().item()\n","#             print('Best loss improved')\n","\n","        sum_acc[0, epoch] = accuracy\n","        sum_loss[0, epoch] = loss  \n","        epoch_end = time.time()\n","        print(\"Epoch: {} Loss: {:.3f} IoU: {:.3f} Time: {:.4f}s\".format(epoch, loss.item(), accuracy, epoch_end-epoch_start))\n","        \n","        #plt.plot(sum_acc[0,0:epoch].T)\n","        #plt.show()\n","    \n","    return sum_acc, sum_loss"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":121,"referenced_widgets":["46563d8325eb4144ae4899d1f6166192","3553b8589e57465fa179433db08f60e3","4fcf82692c5941819c6ba603e600ac1c","3a9b1ff6977f4f249578860ab1e333cf","5221f344bb47466894f1373be2a32719","8cb279019c434722bbe9f037a08ab61b","2c505299c9594255aa1b7f0b559f177d","3d11d7f62f7d4109a9c1df1e02597add","40dd21a41825494db5786f25d3c7f1ef","ddf0b96b9d464f2da0dfc6bc0daca607","d6283bb0145249b9980c527c90c070e8"]},"id":"xqd_LMTagMLO","outputId":"880f5f55-c872-45d0-8d8e-60ec4f3a3b88"},"outputs":[{"name":"stderr","output_type":"stream","text":["Downloading: \"https://github.com/lukemelas/EfficientNet-PyTorch/releases/download/1.0/efficientnet-b0-355c32eb.pth\" to /root/.cache/torch/hub/checkpoints/efficientnet-b0-355c32eb.pth\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"46563d8325eb4144ae4899d1f6166192","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0.00/20.4M [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stderr","output_type":"stream","text":["\r  0%|          | 0/100 [00:00<?, ?it/s]"]},{"name":"stdout","output_type":"stream","text":["Best metrics\n"]},{"name":"stderr","output_type":"stream","text":["\r  1%|          | 1/100 [2:21:07<232:50:41, 8467.09s/it]"]},{"name":"stdout","output_type":"stream","text":["Epoch: 0 Loss: 0.021 IoU: 0.826 Time: 8467.0847s\n"]}],"source":["model = smp.Unet(encoder_name='efficientnet-b0', \n","                 encoder_depth=5, \n","                 encoder_weights='imagenet', \n","                 decoder_use_batchnorm=True, \n","                 decoder_channels=(256, 128, 64, 32, 16), \n","                 decoder_attention_type=None, \n","                 in_channels=3, \n","                 classes=1, \n","                 #activation='sigmoid', \n","                 aux_params=None)\n","\n","accuracy, loss = train(model, 100)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":137,"referenced_widgets":["bce49c0566824c118c569f0b350f2613","c7de0a23ac6e42c5a0c851a5eb8494f7","57db7fd2a88941b296e481ee1fb253e2","deaf2451fdd64aecb093e7892d14c1d1","0133b2a8f8f94a718776a9eec8a57fee","d7ae717e8b474dae85c31887db7bee4d","3c53809b841c4065bfa2c5abc4b9d795","e09a98db9b9a4c89983a864998f02c6d","bee601078f114398b86cb11414ddc8b4","d509f64435b742d29164efc9fc4794be","61e61fcbd2274d8b9a70ce8c6c8eb676"]},"id":"naBQOGRpunh5","outputId":"e068327a-c18b-4a54-f916-7ac1571cbc8d"},"outputs":[{"output_type":"stream","name":"stderr","text":["Downloading: \"https://github.com/lukemelas/EfficientNet-PyTorch/releases/download/1.0/efficientnet-b4-6ed6700e.pth\" to /root/.cache/torch/hub/checkpoints/efficientnet-b4-6ed6700e.pth\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0.00/74.4M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bce49c0566824c118c569f0b350f2613"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/100 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Best metrics\n"]},{"output_type":"stream","name":"stderr","text":["\r  1%|          | 1/100 [31:44<52:22:46, 1904.71s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch: 0 Loss: 0.021 IoU: 0.853 Time: 1904.7117s\n"]},{"output_type":"stream","name":"stderr","text":["\r  2%|▏         | 2/100 [58:45<47:18:14, 1737.70s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch: 1 Loss: 0.008 IoU: 0.834 Time: 1620.7864s\n"]}],"source":["model = smp.DeepLabV3Plus(encoder_name='efficientnet-b4', \n","                          encoder_depth=5,\n","                          encoder_weights='imagenet',\n","                          encoder_output_stride=16,\n","                          decoder_channels=256,\n","                          decoder_atrous_rates=(12, 24, 36),\n","                          in_channels=3,\n","                          classes=1,\n","                          activation=None,\n","                          upsampling=4,\n","                          aux_params=None)\n","\n","accuracy, loss = train(model, 100)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qfexiKwGZNzV"},"outputs":[],"source":["np.save('/gdrive/My Drive/Segmentation_project/Loss_IoU/acc_1605_efficientnet-b4_batch=26_deep.npy', accuracy)\n","np.save('/gdrive/My Drive/Segmentation_project/Loss_IoU/loss_1605_efficientnet-b4_batch=26_deep.npy', loss)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aAiw4TEsZwTF"},"outputs":[],"source":[""]},{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"id":"ZJ7oSSURgMLT"},"outputs":[],"source":["# медианный фильтр, чтобы убрать полосы\n","# pretrained (ссылка) вместо ImageNet - посмотреть веса\n","# FPN / DeepLab\n"]},{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"id":"jvCvAeR-gMLX"},"outputs":[],"source":["# efficient/mobileNet\n","# аугментации (поворот, растяжение, цвет)\n","# дописать лит обзор про гистотрипсию и применение сетей +"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XTXIMH5vWHyO"},"outputs":[],"source":["# Opencv медианный фильтр для картинок, чтобы убрать полосы\n","# дисбаланс классов, focalloss \n","# загрузка с диска (взять tiff, нарезать)"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":[],"name":"2_Education","provenance":[{"file_id":"1UoTTUY9RdSqlRoqzHNlub9b4UdLDGA0q","timestamp":1652380278509}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.3"},"widgets":{"application/vnd.jupyter.widget-state+json":{"2c505299c9594255aa1b7f0b559f177d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"3553b8589e57465fa179433db08f60e3":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_8cb279019c434722bbe9f037a08ab61b","placeholder":"​","style":"IPY_MODEL_2c505299c9594255aa1b7f0b559f177d","value":"100%"}},"3a9b1ff6977f4f249578860ab1e333cf":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ddf0b96b9d464f2da0dfc6bc0daca607","placeholder":"​","style":"IPY_MODEL_d6283bb0145249b9980c527c90c070e8","value":" 20.4M/20.4M [00:00&lt;00:00, 116MB/s]"}},"3d11d7f62f7d4109a9c1df1e02597add":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"40dd21a41825494db5786f25d3c7f1ef":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"46563d8325eb4144ae4899d1f6166192":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_3553b8589e57465fa179433db08f60e3","IPY_MODEL_4fcf82692c5941819c6ba603e600ac1c","IPY_MODEL_3a9b1ff6977f4f249578860ab1e333cf"],"layout":"IPY_MODEL_5221f344bb47466894f1373be2a32719"}},"4fcf82692c5941819c6ba603e600ac1c":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_3d11d7f62f7d4109a9c1df1e02597add","max":21388428,"min":0,"orientation":"horizontal","style":"IPY_MODEL_40dd21a41825494db5786f25d3c7f1ef","value":21388428}},"5221f344bb47466894f1373be2a32719":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8cb279019c434722bbe9f037a08ab61b":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d6283bb0145249b9980c527c90c070e8":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ddf0b96b9d464f2da0dfc6bc0daca607":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bce49c0566824c118c569f0b350f2613":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_c7de0a23ac6e42c5a0c851a5eb8494f7","IPY_MODEL_57db7fd2a88941b296e481ee1fb253e2","IPY_MODEL_deaf2451fdd64aecb093e7892d14c1d1"],"layout":"IPY_MODEL_0133b2a8f8f94a718776a9eec8a57fee"}},"c7de0a23ac6e42c5a0c851a5eb8494f7":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d7ae717e8b474dae85c31887db7bee4d","placeholder":"​","style":"IPY_MODEL_3c53809b841c4065bfa2c5abc4b9d795","value":"100%"}},"57db7fd2a88941b296e481ee1fb253e2":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_e09a98db9b9a4c89983a864998f02c6d","max":77999237,"min":0,"orientation":"horizontal","style":"IPY_MODEL_bee601078f114398b86cb11414ddc8b4","value":77999237}},"deaf2451fdd64aecb093e7892d14c1d1":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d509f64435b742d29164efc9fc4794be","placeholder":"​","style":"IPY_MODEL_61e61fcbd2274d8b9a70ce8c6c8eb676","value":" 74.4M/74.4M [00:00&lt;00:00, 126MB/s]"}},"0133b2a8f8f94a718776a9eec8a57fee":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d7ae717e8b474dae85c31887db7bee4d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3c53809b841c4065bfa2c5abc4b9d795":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"e09a98db9b9a4c89983a864998f02c6d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bee601078f114398b86cb11414ddc8b4":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"d509f64435b742d29164efc9fc4794be":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"61e61fcbd2274d8b9a70ce8c6c8eb676":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":0}